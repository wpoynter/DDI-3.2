#ifndef <%= name.upcase %>_HPP
#define	<%= name.upcase %>_HPP

#include "basic.hpp"

<% children.each do |child| %>#include "<%= child[:name].downcase %>.hpp"
<% end %>

class <%= name %>;

typedef std::shared_ptr<<%= name %>> <%= name %>ShPtr;
typedef std::list<<%= name %>ShPtr> <%= name %>PtrList;


class <%= name %> : public Basic {
private:
   <% children.each do |child| %>
   <% if child[:repeatable] then %><%= 
   child[:name] %>PtrList <%= child[:name].tableize %>;<% 
   	else 
   	%><%= child[:name] %>ShPtr <%= child[:name].tableize.singularize %>;<% end %><% end %>
   <% attributes.each do |attr| %>std::string <%= attr.tableize.singularize %>;<% end %>
   <% if has_content? then %>std::string content;<% end %>
   BasicWkPtr parent;
public:
	<%= name %>();
	~<%= name %>() {}
	
	//Keep track of all objects 
	static std::list<<%= name %>ShPtr> all;
	static std::string type;
	
	static <%= name %>ShPtr create();
	static <%= name %>ShPtr create(BasicWkPtr);
	static void destroy(unsigned int _ID);
	virtual void destroy();
	
	BasicWkPtr get_parent();
	void set_parent(BasicWkPtr);
	
	std::string get_type();
	
	//Getters and setters
	<% children.each do |child| %><% if child[:repeatable] then %><%= 
	child[:name] %>PtrList get_<%= child[:name].tableize %>();<% else %>
	<%= child[:name] %>ShPtr get_<%= child[:name].tableize.singularize %>();
	void set_<%= child[:name].tableize.singularize %>(<%= child[:name] %>ShPtr);
	<% end %>
	<% end %>
	<% attributes.each do |attr| %>std::string get_<%= attr.tableize.singularize %>();<% end %>
	<% attributes.each do |attr| %>void set_<%= attr.tableize.singularize %>(std::string);<% end %>
	<% if has_content? then %>std::string get_content();<% end %>
	<% if has_content? then %>void set_content(std::string);<% end %>
	void read_element(ticpp::Element*);
};

#endif	/* <%= name.upcase %>_HPP */